{"version":3,"sources":["components/PokeCell.js","server.js","components/PokeList.js","components/DetailView.js","components/App.js","serviceWorker.js","index.js"],"names":["PokeCell","_ref","pokemon","handleOnClick","name","key","src","react_default","a","createElement","onClick","className","alt","axios","require","create","baseURL","PokeList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","results","_this2","API","get","then","response","setState","data","getPokemons","cells","map","components_PokeCell","url","Component","DetailView","App","bind","assertThisInitialized","console","log","components_PokeList","components_DetailView","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAYeA,qBATE,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,cAChBC,EAAcF,EAAdE,KAAMC,EAAQH,EAARG,IAGRC,EADW,qCACMF,EAAO,OAE9B,OAAQG,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMP,EAAcE,IAAMM,UAAU,aAAYJ,EAAAC,EAAAC,cAAA,OAAKH,IAAKA,EAAKM,IAAKR,OCPlFS,EAFDC,EAAQ,IAEDC,OAAO,CACxBC,QAAO,+BCwCIC,cApCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,IAHER,6EAOL,IAAAS,EAAAN,KACGO,EAAIC,IAAJ,WACRC,KAAK,SAAAC,GACFJ,EAAKK,SAAS,CAACN,QAASK,EAASE,KAAKP,wDAK9CL,KAAKa,+CAIL,IAAMC,EAAQd,KAAKI,MAAMC,QAAQU,IAAI,SAAUnC,EAASG,GACpD,OACIE,EAAAC,EAAAC,cAAC6B,EAAD,CACIjC,IAAKA,EACLH,QAAS,CAACE,KAAMF,EAAQE,KAAMmC,IAAKrC,EAAQqC,SAKvD,OACIhC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACVyB,UAhCMI,aCWRC,SAbI,WAEf,OACIlC,EAAAC,EAAAC,cAAA,WAASE,UAAU,eACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeC,IAAI,KAClCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACdJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBCiBd+B,cArBX,SAAAA,IAAc,IAAAvB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,IACVvB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,KAAAH,QACKI,MAAQ,GAEbP,EAAKhB,cAAgBgB,EAAKhB,cAAcwC,KAAnBvB,OAAAwB,EAAA,EAAAxB,CAAAD,IAJXA,+EAQV0B,QAAQC,IAAI,wCAIZ,OACIvC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACsC,EAAD,CAAU5C,cAAemB,KAAKnB,gBAC9BI,EAAAC,EAAAC,cAACuC,EAAD,cAhBER,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.5ee18ecc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/PokeCell.scss';\r\n\r\nconst PokeCell = ({pokemon, handleOnClick}) => {\r\n    const { name, key } = pokemon;\r\n\r\n    const endpoint = \"http://pokestadium.com/sprites/xy/\";\r\n    const src = endpoint + name + \".gif\";\r\n\r\n    return (<button onClick={() => handleOnClick(key)} className=\"poke-cell\"><img src={src} alt={name} /></button>);\r\n}\r\n\r\nexport default PokeCell;","const axios = require('axios');\r\n\r\nexport default axios.create({\r\n    baseURL: `https://pokeapi.co/api/v2/`\r\n});","import React, {Component} from 'react';\r\nimport './styles/PokeList.css';\r\nimport PokeCell from \"./PokeCell\";\r\nimport API from '../server';\r\n\r\nclass PokeList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: [],\r\n        };\r\n    }\r\n\r\n    getPokemons() {\r\n        const data = API.get(`pokemon`)\r\n            .then(response => {\r\n                this.setState({results: response.data.results});\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPokemons();\r\n    }\r\n\r\n    render() {\r\n        const cells = this.state.results.map(function (pokemon, key) {\r\n            return (\r\n                <PokeCell\r\n                    key={key}\r\n                    pokemon={{name: pokemon.name, url: pokemon.url}}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"poke-list\">\r\n                {cells}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokeList;","import React from 'react';\r\nimport './styles/DetailView.css'\r\n\r\nconst DetailView = () => {\r\n\r\n    return (\r\n        <section className=\"detail-view\">\r\n            <img className='sprite-image' alt=''/>\r\n            <div className='data-wrapper'>\r\n                <h1 className='data-name'></h1>\r\n                <p className=\"data-char\"></p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default DetailView;","import React, {Component} from 'react';\r\nimport './styles/App.css'\r\nimport PokeList from \"./PokeList\";\r\nimport DetailView from \"./DetailView\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n\r\n        this.handleOnClick = this.handleOnClick.bind(this);\r\n    }\r\n\r\n    handleOnClick() {\r\n        console.log(\"kek\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <PokeList handleOnClick={this.handleOnClick} />\r\n                <DetailView />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}